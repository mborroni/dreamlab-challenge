// Code generated by MockGen. DO NOT EDIT.
// Source: addresses.go

// Package ips is a generated GoMock package.
package ips

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockrepository is a mock of repository interface
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *Mockrepository) List(arg0 context.Context, arg1 int, arg2 map[string]interface{}) ([]*IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockrepositoryMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockrepository)(nil).List), arg0, arg1, arg2)
}

// Get mocks base method
func (m *Mockrepository) Get(arg0 context.Context, arg1 int64) (*IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockrepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockrepository)(nil).Get), arg0, arg1)
}

// GetIPQuantityByCountry mocks base method
func (m *Mockrepository) GetIPQuantityByCountry(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPQuantityByCountry", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPQuantityByCountry indicates an expected call of GetIPQuantityByCountry
func (mr *MockrepositoryMockRecorder) GetIPQuantityByCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPQuantityByCountry", reflect.TypeOf((*Mockrepository)(nil).GetIPQuantityByCountry), arg0, arg1)
}

// GetTop10ISPByCountry mocks base method
func (m *Mockrepository) GetTop10ISPByCountry(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTop10ISPByCountry", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTop10ISPByCountry indicates an expected call of GetTop10ISPByCountry
func (mr *MockrepositoryMockRecorder) GetTop10ISPByCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTop10ISPByCountry", reflect.TypeOf((*Mockrepository)(nil).GetTop10ISPByCountry), arg0, arg1)
}
